diff --git a/python/euler_answer_check.py b/python/euler_answer_check.py
index 49a08fb..5b02d73 100644
--- a/python/euler_answer_check.py
+++ b/python/euler_answer_check.py
@@ -1,42 +1,27 @@
 import unittest
 from os.path import exists
 from parameterized import parameterized
+from importlib import import_module
 
 modules = []
+for x in range(1,51):
+    if exists(f'euler{x}.py'):
+        modules.append(import_module(f'euler{x}'))
 
-fptr = open('data/answers', 'r')
-unformatted = fptr.readlines()
-fptr.close()
+with open('data/answers') as fptr:
+    answers = fptr.readlines()
 
-answers = [int(answer.strip()) for answer in unformatted]
-del(unformatted)
+answers = [answer.strip() for answer in answers]
+needed_answers = []
 
+for module in modules:
+    needed_answers.append(int(answers[int(module.__name__[5:]) - 1]))
 
-for x in range(1,11):
-    if exists(f'euler{x}.py'):
-        modules.append(__import__(f'euler{x}'))
-    else:
-        try:
-            answers.pop(answers.index(answers[x-1]))
-        except:
-            pass
-
-times = []
-class CheckSolutions(unittest.TestCase):
-    @parameterized.expand([[f'euler{a}', b, c] for a, (b, c) in enumerate(zip(answers, modules))])
-    def test_all_tests(self, name, answer, module):
-        found_answer, mem, time = module.find_answer()
-        self.assertEqual(answer, found_answer)
-
-        times.append(time)
-
-    def test_times(self):
-        print('')
-        for i, module in enumerate(modules):
-            print(f'{module.__name__} {times[i]}')
-        
-            
+del(answers)
+
+class TestAnswers(unittest.TestCase):
 
+    
 
 
 if __name__ == '__main__':
diff --git a/python/euler_answer_check.py b/python/euler_answer_check.py
index 49a08fb..1f9abd9 100644
--- a/python/euler_answer_check.py
+++ b/python/euler_answer_check.py
@@ -1,42 +1,32 @@
 import unittest
 from os.path import exists
 from parameterized import parameterized
+from importlib import import_module
 
 modules = []
+for x in range(1,51):
+    if exists(f'euler{x}.py'):
+        modules.append(import_module(f'euler{x}'))
 
-fptr = open('data/answers', 'r')
-unformatted = fptr.readlines()
-fptr.close()
+with open('data/answers') as fptr:
+    answers = fptr.readlines()
 
-answers = [int(answer.strip()) for answer in unformatted]
-del(unformatted)
+answers = [answer.strip() for answer in answers]
+needed_answers = []
 
+for module in modules:
+    needed_answers.append(int(answers[int(module.__name__[5:]) - 1]))
 
-for x in range(1,11):
-    if exists(f'euler{x}.py'):
-        modules.append(__import__(f'euler{x}'))
-    else:
-        try:
-            answers.pop(answers.index(answers[x-1]))
-        except:
-            pass
-
-times = []
-class CheckSolutions(unittest.TestCase):
-    @parameterized.expand([[f'euler{a}', b, c] for a, (b, c) in enumerate(zip(answers, modules))])
-    def test_all_tests(self, name, answer, module):
-        found_answer, mem, time = module.find_answer()
-        self.assertEqual(answer, found_answer)
 
-        times.append(time)
-
-    def test_times(self):
-        print('')
-        for i, module in enumerate(modules):
-            print(f'{module.__name__} {times[i]}')
-        
-            
+answers = needed_answers.copy()
+del(needed_answers)
 
+class TestAnswers(unittest.TestCase):
+    @parameterized.expand([f'{module.__name__}', b, c] for module, b, c in zip(modules, modules, answers))
+    def test_all_tests(self, name, answer, module):
+        derived_answer, mem, time = module.find_answer()
+        self.assertEqual(derived_answer, answer, '{name} should have gotten {answer} but got {derived_answer}')
+    
 
 
 if __name__ == '__main__':
